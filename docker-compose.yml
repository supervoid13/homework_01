version: "3.8"

services:
  api:
    container_name: api_container
    build: .
    restart: always
    networks:
      - my_network
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      db_test:
        condition: service_healthy

  db:
    container_name: db_container
    image: postgres:15.1-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
      PGUSER: "${PGUSER}"
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

  db_test:
    container_name: db_container_test
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: "${DB_USER_TEST}"
      POSTGRES_PASSWORD: "${DB_PASSWORD_TEST}"
      POSTGRES_DB: "${DB_NAME_TEST}"
      PGUSER: "${PGUSER}"
    networks:
      - my_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "${DB_USER_TEST}", "-d", "${DB_NAME_TEST}" ]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s

networks:
  my_network:
    name: my_network
volumes:
  postgres_data: